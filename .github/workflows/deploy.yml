name: Docker Image CD

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  export_env:
    name: Export_env
    runs-on: ubuntu-latest
    steps:
      - name: Connect with SSH and export
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.REMOTE_SERVER_HOST }}
          username: ${{ secrets.REMOTE_SERVER_USERNAME }}
          password: ${{ secrets.REMOTE_SERVER_PASSWORD }}
          script: |
            cd /home/${{ secrets.REMOTE_SERVER_USERNAME}}
            rm .env
            export POSTGRES_USER=${{ secrets.CLIENT_POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.CLIENT_POSTGRES_PASSWORD }}
            export POSTGRES_IP=${{ secrets.POSTGRES_IP}}
            export REFRESH_TOKEN=${{ secrets.REFRESH_TOKEN }}
            export ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN }}
            export DB_NAME=${{ secrets.DB_NAME }}

            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_IP=${{ secrets.POSTGRES_IP}} >> .env
            echo REFRESH_TOKEN=${{ secrets.REFRESH_TOKEN }} >> .env
            echo ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            
            export $(cat .env | xargs) && env

  push_compose:
    name: Push docker-compose.yaml to remote server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Copy docker-compose.yaml via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_SERVER_HOST }}
          username: ${{ secrets.REMOTE_SERVER_USERNAME }}
          password: ${{ secrets.REMOTE_SERVER_PASSWORD }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/${{ secrets.REMOTE_SERVER_USERNAME }}"
          overwrite: true


  build:
    runs-on: ubuntu-latest
    name: Build Images And Push To DockerHub
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3


      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      # CRM Service

      - name: Build Card Service with Maven
        run: mvn package -Dmaven.test.skip=true -P prod

      - name: Push Docker Image of CRM service to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          file: Dockerfile
          tags: andreynachevny/card-service:latest

  deploy:
    name: Deploy
    needs: [ export_env, build ]
    runs-on: ubuntu-latest
    steps:
      - name: Connect with SSH and Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.REMOTE_SERVER_HOST }}
          username: ${{ secrets.REMOTE_SERVER_USERNAME }}
          password: ${{ secrets.REMOTE_SERVER_PASSWORD }}
          script: |
            cd /home/${{ secrets.REMOTE_SERVER_USERNAME}}

            docker container stop $(docker container ls --format '{{.Names}}' | grep -vE '^(card-service-db)$')
            docker ps -a --format '{{.Names}}' | grep -vE '^(card-service-db)$' | xargs docker rm
            docker images --format '{{.Repository}}:{{.Tag}}' | grep -vE '^(postgres:14-alpine)$' | xargs docker rmi

            docker pull andreynachevny/card-service:latest

            docker compose up -d --no-recreate
